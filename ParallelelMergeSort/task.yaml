accessible: false
author: Bastin J, Piron H
categories:
- module6
context: |-
    In this task, you will be asked to implement a special kind of merge sort using the RecursiveAction_ , ForkJoinPool_ and ForkJoinTask_ interfaces. You will understand by reading these interfaces that the merge sort you must implement is not only recursive but in parallel.

    You have to complete the following class : ParallelMergeSort_

    Here is an example of how we can use your implementation :

    .. code-block:: java

        int size = 1000;
        Integer[] array = new Integer[size];
        for(int i = 0 ; i < size ; i++){
            array[i] = rng.nextInt(10000);
        }
        ParallelMergeSort task = new ParallelMergeSort(array, 0, size-1, new Integer[size],
                        Comparator.comparing(Integer::intValue));
        new ForkJoinPool().invoke(task);


    You will see that we've fixed a threshold, the reason we are using a threshold is easy to understand. Since you want your code to be effective on very large array, starting a thread for every element can be very ressource consuming and thus you would be losing the advantage you had of using concurrent programming. So when the subarray you're working on is smaller than the threshold, it simply run a normal sort.


    You can download the `IntelliJ Project`_ that contains few tests to help you.

    .. _`IntelliJ Project`: /course/LEPL1402/ParallelelMergeSort/LEPL1402_ParallelelMergeSort.zip
    .. _RecursiveAction: https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveAction.html
    .. _ForkJoinPool: https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html
    .. _ForkJoinTask: https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html
    .. _ParallelMergeSort: /course/LEPL1402/ParallelelMergeSort/ParallelMergeSort.java
environment: pyjavacpp
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    time: '30'
    output: '2'
name: '[Module 6] Parallel Merge Sort'
network_grading: false
order: 58
problems:
    studentConstructor:
        header: 'Paste here the **body** of your constructor:'
        type: code
        name: Constructor Implementation
        language: java
        default: ''
    studentCompute:
        type: code
        language: java
        default: ''
        header: 'Paste here the **body** of the compute method:'
        name: Compute Implementation
    studentSort:
        language: java
        default: ''
        type: code
        header: 'Paste here the **body** of the sort method:'
        name: Sort Implementation
    studentMerge:
        language: java
        name: Merge Implementation
        header: 'Paste here the **body** of the merge method:'
        type: code
        default: ''
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0

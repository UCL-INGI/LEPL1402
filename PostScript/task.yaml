accessible: false
author: Yakoub J, Rucquoy A
categories:
- module3
context: |-
    You are asked to write a mini-PostScript interpreter as described in the *pdf* (Mission_) of the mission. Precisely, you must implement the following interface :

    .. code-block:: java

        public interface InterpreterInterface {
            /**
             * @pre: 'instructions' is a valid chain of PostScript instructions
             * @post: returns a String representing the state of the stack when a 'pstack' instruction is encountered.
             *    If several 'pstack' instructions are present in the chain, a concatenation of the corresponding states (when 'pstack' is encountered) must be returned, separated by whitespaces.
             *    If several elements are still on the stack, separate them with whitespaces.
             *    If there is no element on the stack or no 'pstack' instruction, return the empty string ("").
             */
            public String interpret(String instructions);
        }

    We expect your interpreter to be able to handle all of the following specified operations:

    +--------------------+-----------+---------------------------------------+
    |       Before       | After     | Description                           |
    +--------------------+-----------+---------------------------------------+
    | any **pstack**     | pstack    | print the top element                 |
    |                    |           | of the pile to the standard output    |
    +--------------------+-----------+---------------------------------------+
    | any1 any2 **exch** | any2 any1 | Swap the two top most element of      |
    |                    |           | the stack                             |
    +--------------------+-----------+---------------------------------------+
    | any **pop**        |           | Pop the top most element of the stack |
    +--------------------+-----------+---------------------------------------+
    | any **dup**        | any any   | Duplicate the top most element of the |
    |                    |           | stack                                 |
    +--------------------+-----------+---------------------------------------+
    | any1 any2 **add**  | any1+any2 | Pop two elements from the stack,      |
    |                    |           | compute their sum and push the result |
    +--------------------+-----------+---------------------------------------+
    | any1 any2 **sub**  | any1-any2 | Same, but with a subtraction          |
    +--------------------+-----------+---------------------------------------+
    | any1 any2 **mul**  | any1*any2 | Same, but with a multiplication       |
    +--------------------+-----------+---------------------------------------+
    | any1 any2 **div**  | any1/any2 | Same, but with a division             |
    +--------------------+-----------+---------------------------------------+
    | any1 any2 **idiv** | any3      |  Compute the quotient of an integer   |
    |                    |           |  division of any1 by any2, then       |
    |                    |           |  push the result to the stack         |
    +--------------------+-----------+---------------------------------------+

    The element of the stack could be:
        - Operators - any operators from the array above.
        - Operands - any integer, double or boolean (true, false)

    Don't forget to throw exceptions : ``EmptyStackException`` if there's not enough operand left on the stack, ``ArithmeticException`` when an illegal computation
    is submitted to your interpreter, ``IllegalArgumentException`` when a bad operand is found (for example, a boolean instead of an integer when performing a mathematical operation)


    .. _Mission: /course/LEPL1402/PostScript/mission.pdf
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[Module 3] Postscript interpreter'
network_grading: false
order: 61
problems:
    student_code:
        language: java
        header: 'Paste here the **body** of your Interpreter class:'
        type: code
        name: ''
        default: ''
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0

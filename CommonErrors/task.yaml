accessible: /2019-10-16 23:55:55/2019-10-16 23:55:55
author: Yakoub J, Rucquoy A
categories:
- module1
context: ''
environment: mcq
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    time: '30'
    output: '2'
    memory: '100'
name: '[Module 1] Game of 9 common Java programming errors'
network_grading: false
order: 6
problems:
    mcq1:
        choices:
        -   text: |-
                .. code-block::

                  i1 is not equal to i2
                  i3 is equal to i4
                  s1 is not equal to s2
            valid: true
        -   text: |-
                .. code-block::

                  i1 is equal to i2
                  i3 is equal to i4
                  s1 is not equal to s2
            feedback: Java cached only some Integers (from -127 to 127) references
                so == will returns false whereas .equals() give true
        -   feedback: s1 is a String constant which is stored in memory inside the
                java String pool, s2 is a String object which is stored in the heap
                but not inside the pool. If you compare them with ==, you will always
                get a false result because you compare the references (one is pointing
                to the string pool and the other to the heap). But if you compare
                them with .equals(), it will compare the values.
            text: |-
                .. code-block::

                  i1 is not equal to i2
                  i3 is equal to i4
                  s1 is equal to s2
        limit: 0
        success_message: Prefer to use i1.equals(i2) or s1.equals(s2) , which compares
            the values and not == that only check the references.
        type: multiple_choice
        header: |4-

            Suppose you run the following code, what will you on STDOUT ?

            .. code-block:: java

              public static void main(String... args) {
                Integer i1 = 128;
                Integer i2 = 128;
                Integer i3 = 42;
                Integer i4 = 42;
                String s1 = "EPL";
                String s2 = new String("EPL");
                if (i1 == i2) {
                  System.out.println("i1 is equal to i2");
                } else {
                  System.out.println("i1 is not equal to i2");
                }
                if (i3 == i4) {
                  System.out.println("i3 is equal to i4");
                } else {
                  System.out.println("i3 is not equal to i4");
                }
                if (s1 == s2) {
                  System.out.println("s1 is equal to s2");
                } else {
                  System.out.println("s1 is not equal to s2");
                }
              }
        name: Confusing object comparison (== instead of .equals)
    mcq2:
        limit: 0
        header: 'Arrays start at :'
        choices:
        -   text: '0'
            valid: true
        -   text: '1'
            feedback: Java is not an 1-based array index language like MathLab or
                R
        name: Confusing about 0-based or 1-based index
        type: multiple_choice
    mcq3:
        choices:
        -   text: This code throw a ConcurrentModificationException but only on multi
                thread programs
            feedback: |
                Even in single thread programs, it causes the iteration to behalve unpredictably as the content of the list get changed
        -   valid: true
            text: This code throw a ConcurrentModificationException
        header: |-
            What is the problem in this code ? (documentation about thread_ )


            .. code-block:: java

              List<String> fixedList = Arrays.asList("Apple", "Banana", "Carrot", "Grape");
              List<String> listFruit = new ArrayList<>(fixedList);

              for (String fruit : listFruit) {
                if (fruit.contains("e")) {
                  listFruit.remove(fruit);
                }
              }

            .. _Thread: https://en.wikipedia.org/wiki/Thread_(computing)#Multithreading
        limit: 0
        name: Modifying a collection while iterating it
        type: multiple_choice
    mcq4:
        choices:
        -   feedback: You identified the NullPointerException
            text: |-
                .. code-block:: java

                  String ptr = null;
                  if (ptr.equals("EPL")) {
                    System.out.println("SAME");
                  }
            valid: true
        -   text: |-
                .. code-block:: java

                  String s;
                  if (s.equals("EPL")) {
                    System.out.println("SAME");
                  }
            valid: true
            feedback: You identified the "variable s might not have been initialized
                error"
        -   feedback: 'There is not always a problem here : it depends on the random
                boolean value'
            text: |-
                .. code-block:: java

                  // a random boolean
                  Random r = new Random();
                  boolean value = r.nextBoolean();

                  String s = (value) ? "EPL" : null;
                  if (s.equals("EPL")) {
                    System.out.println("SAME");
                  }
        limit: 0
        type: multiple_choice
        multiple: true
        header: Which code sample(s) **always** produce a problem ?
        name: Confusing about object reference
    mcq5:
        header: |4-

            What could be a problem here ?

            .. code-block:: java

              public static void main(String args[]) {
                Hashtable sampleMap = new Hashtable();
                Enumeration enumeration = sampleMap.elements();
                enumeration.nextElement();
              }
        choices:
        -   text: 'A NoSuchElementException will occur as we have no element in the
                hashtable. '
            valid: true
            feedback: Thereby we must call "enumeration.hasMoreElements()" each time
                before any call of enumeration.nextElement();
        -   text: A RuntimeException will occur as we have no element in the hashtable.
            feedback: NoSuchElementException extends RuntimeException
        type: multiple_choice
        limit: 0
        name: Enumeration
    mcq6:
        choices:
        -   text: |-
                .. code-block:: java

                  PrintWriter writer = null;

                  try {
                    writer = new PrintWriter(new File("EPL.txt"));
                    writer.write("WhateverStringIWant");
                    writer.close();
                  } catch (Exception err) {
                    err.printStackTrace();
                  }
            feedback: Not safe as it is still possible to leak the file ressource
                in the catch part
        -   valid: true
            text: |-
                .. code-block:: java

                  PrintWriter writer = null;

                  try {
                    writer = new PrintWriter(new File("EPL.txt"));
                    writer.write("WhateverStringIWant");
                  } catch (Exception err) {
                    err.printStackTrace();
                  } finally {
                    if ( writer != null ) {
                      writer.close();
                    }
                  }
            feedback: The try-catch-finally works to deal with this problem but it
                takes many lines, no ?
        -   valid: true
            feedback: Always prefer the try-with-resources notation as it takes much
                less code lines
            text: |-
                .. code-block:: java

                  try (PrintWriter writer = new PrintWriter(new File("EPL.txt"))) {
                    writer.write("WhateverStringIWant");
                  } catch(Exception err) {
                    err.printStackTrace();
                  }
        multiple: true
        header: |4-

            Select correct code sample(s) that does the same thing that this unsafe code sample :

            .. code-block:: java

              PrintWriter writer = null;

              try {
                writer = new PrintWriter(new File("EPL.txt"));
                writer.write("WhateverStringIWant");
              } catch (Exception err) {
                err.printStackTrace();
              }
        type: multiple_choice
        limit: 0
        name: Forgetting to free resources
    mcq7:
        name: Static / Not Static context on fields / methods call
        choices:
        -   text: No as we get the following compiler error "non-static variable count
                cannot be referenced from a static context"
            valid: true
        -   text: 'Yes'
            feedback: Non-static variable count cannot be referenced from a static
                context
        limit: 0
        header: |-
            Does it work ?

            .. code-block:: java

             public class StaticTest {
               private int count=0;
               public static void main(String args[]) {
                 count++;
               }
             }
        type: multiple_choice
    mcq8:
        choices:
        -   valid: true
            text: |-
                .. code-block::

                  After swapping call, MEAN OF LIFE is equal to 42
                  Student Noel has the grade 10.0
                  Student Noel has the grade 0.0
        -   feedback: Even for primitives (like int), the swap method will not work
            text: |-
                .. code-block::

                  After swapping call, MEAN OF LIFE is equal to 2048
                  Student Noel has the grade 10.0
                  Student Noel has the grade 0.0
        -   text: |-
                .. code-block::

                  After swapping call, MEAN OF LIFE is equal to 42
                  Student Noel has the grade 40.0
                  Student Noel has the grade 0.0
            feedback: Just because we first change the value of the reference to the
                object in setGrade(), futher operations will be without effect
        type: multiple_choice
        name: Pass by value or by reference
        header: |4-

            Can you correctly predict what would be the STDOUT of the following code ?

            .. code-block:: java

              // A user defined class to illustrate
              public class Student {
                private double grade;
                private String name;
                public Student(String name, double grade) {
                  this.name = name;
                  this.grade = grade;
                }
                public double getGrade() {
                  return this.grade;
                }
                public String getName() {
                  return this.name;
                }
                public void setGrade(double grade) {
                  this.grade = grade;
                }
              }

              public class Test {

                //Generic swap method
                public static void swap(Object o1, Object o2){
                  Object temp = o1;
                  o1 = o2;
                  o2 = temp;
                }

                // Common functions that illustrate external modification of a Object

                public static void setGrade(Student std) {
                  std = new Student(std.getName(), std.getGrade() * 2 );
                  std.setGrade( std.getGrade() * 2 );
                }

                public static void setGrade2(Student std) {
                  std.setGrade(0);
                }

                // Let's see if you can correctly predict the STDOUT

                public static void main(String[] args) {

                  int meanOfLife = 42;
                  int randomInt = 2048;
                  swap(meanOfLife, randomInt);
                  String s1 = "After swapping call, MEAN OF LIFE is equal to "+ meanOfLife;
                  System.out.println(s1);

                  Student std = new Student("Noel", 10);
                  String s_part = "Student " + std.getName() + " has the grade ";

                  setGrade(std);
                  String s2 = s_part + std.getGrade();
                  System.out.println(s2);

                  setGrade2(std);
                  String s3 = s_part + std.getGrade();
                  System.out.println(s3);
                }
              }
        limit: 0
    mcq9:
        error_message: Don't forget to select all the answers
        choices:
        -   text: 'Missing a semicolon after v * 3.14 : Each statement must finish
                by a semicolon'
            valid: true
        -   text: Missing a double modifier in the method declaration of computeSomething
            valid: true
        -   feedback: You can multiply a floating point number with an integer but
                it's not a good habit
            text: You can't multiply a floating point number with an integer in Java.
        name: Forgetting something ...
        limit: 0
        header: |-
            What are the problems here ?

            .. code-block:: java

              public class Wrong {
                public static computeSomething(int v) {
                  return v * 3.14
                }
              }
        multiple: true
        type: multiple_choice
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0

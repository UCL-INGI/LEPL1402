accessible: true
author: Yakoub J, Rucquoy A
categories:
- module1
contact_url: ''
context: ''
environment_id: mcq
environment_parameters: {}
environment_type: mcq
evaluate: best
file: ''
groups: false
input_random: '0'
name: '[Module 1] Game of 9 common Java programming errors'
network_grading: false
order: 7
problems:
    mcq1:
        choices:
        -   text: |-
                .. code-block::

                  False
                  True
                  False
            valid: true
        -   text: |-
                .. code-block::

                  True
                  True
                  False
            feedback: Java cached only some Integers (from -127 to 127) references
                so == will returns false whereas .equals() give true
        -   text: |-
                .. code-block::

                  False
                  True
                  True
            feedback: s1 is a String constant which is stored in memory inside the
                java String pool, s2 is a String object which is stored in the heap
                but not inside the pool. If you compare them with ==, you will always
                get a false result because you compare the references (one is pointing
                to the string pool and the other to the heap). But if you compare
                them with .equals(), it will compare the values.
        success_message: Prefer to use i1.equals(i2) or s1.equals(s2) , which compares
            the values and not == that only check the references.
        name: Confusing object comparison (== instead of .equals)
        type: multiple_choice
        limit: 0
        header: |4-

            Suppose you run the following code, what will you on STDOUT ?

            .. code-block:: java

              public static void main(String... args) {
                Integer i1 = 128;
                Integer i2 = 128;
                Integer i3 = 42;
                Integer i4 = 42;
                String s1 = "EPL";
                String s2 = new String("EPL");

                System.out.println(i1 == i2);
                System.out.println(i3 == i4);
                System.out.println(s1 == s2);
              }
    mcq2:
        choices:
        -   feedback: You can declare the variable `i` outside the for loops. In this
                case, if you do not go through the end of the loop (for various reasons),
                you still know where you stopped.
            text: |4-

                .. code-block:: java

                    int i;
                    for (i = 0; i < array.length; i++) {
                        System.out.println(array[i]);
                    }
            valid: true
        -   valid: true
            text: |4-

                .. code-block:: java

                    for (int i = 0; i < array.length; i++) {
                        System.out.println(array[i]);
                    }
        -   text: |4-

                .. code-block:: java

                    for (int i=1; i <= array.length; i++) {
                        System.out.println(array[i]);
                    }
            feedback: In Java, as in python (and many good programming languages :-)),
                the indexing starts at 0.
        name: Printing an array
        header: Which of the following code(s) correctly print an array?
        type: multiple_choice
        limit: 0
        multiple: true
    mcq3:
        type: multiple_choice
        limit: 0
        choices:
        -   text: This code remove the carrot from the list of fruits.
        -   text: This code throw a ConcurrentModificationException
        -   feedback: Unexpectedely, this is the correct answer. The above code **might**
                work, but generally you **should not** modify a list when iterating
                over **unless you use an iterator**. See https://docs.oracle.com/javase/8/docs/technotes/guides/language/foreach.html
                for some info on the foreach loop.
            valid: true
            text: The behaviour is not well determined.
        header: |
            What is the result of the following lines of code?

            .. code-block:: java

                List<String> fruits = new ArrayList<>();
                fruits.add("Apple");
                fruits.add("Banana");
                fruits.add("Carrot");
                fruits.add("Grape");

                for (String fruit : fruits) {
                    if (fruit.equals("Carrot")) {
                        fruits.remove(fruit);
                    }
                }
        name: It was me, The Carrot!
    mcq4:
        choices:
        -   text: |-
                .. code-block:: java

                  String ptr = null;
                  if (ptr.equals("EPL")) {
                    System.out.println("SAME");
                  }
            feedback: You identified the NullPointerException
            valid: true
        -   valid: true
            feedback: You identified the "variable s might not have been initialized
                error"
            text: |-
                .. code-block:: java

                  String s;
                  if (s.equals("EPL")) {
                    System.out.println("SAME");
                  }
        -   text: |-
                .. code-block:: java

                  // a random boolean
                  Random r = new Random();
                  boolean value = r.nextBoolean();

                  String s = (value) ? "EPL" : null;
                  if (s.equals("EPL")) {
                    System.out.println("SAME");
                  }
            feedback: 'There is not always a problem here : it depends on the random
                boolean value'
        type: multiple_choice
        limit: 0
        multiple: true
        name: Confusing about object reference
        header: Which code sample(s) **always** produce a problem ?
    mcq5:
        choices:
        -   feedback: When using an iterator, you must **always** check that there
                is still some element to iterate over. To do so, you can use the method
                `hasNext()`.
            valid: true
            text: 'A NoSuchElementException will occur as we have no element in the
                list. '
        -   text: Since there is no element in the list, `null` is printed.
            feedback: Well tried, but this is not the behaviour.
        name: Gimme gimme gimme the first element
        header: |
            What is the behaviour of the following code?

            .. code-block:: java

                import java.util.List;
                import java.util.ArrayList;
                import java.util.Iterator;

                class Main {
                    public static void main(String [] args) {
                        List<Integer> l = new ArrayList<>();
                        // Class that allow to iterate on a list
                        Iterator<Integer> ite = l.iterator();
                        // The method "next" gives the next element in the list
                        // and the first call gives the first element
                        Integer firstElement = ite.next();
                        System.out.println(firstElement);
                    }
                }
        type: multiple_choice
        limit: 0
    mcq6:
        choices:
        -   feedback: Not safe as it is still possible to leak the file ressource
                in the catch part
            text: |-
                .. code-block:: java

                    PrintWriter writer = null;

                    try {
                        writer = new PrintWriter(new File("hello_world.txt"));
                        writer.write("Hello, world!");
                        writer.close();
                    } catch (Exception err) {
                        err.printStackTrace();
                    }
        -   valid: true
            feedback: The try-catch-finally works to deal with this problem but it
                takes many lines, no ?
            text: |-
                .. code-block:: java

                    PrintWriter writer = null;

                    try {
                        writer = new PrintWriter(new File("hello_world.txt"));
                        writer.write("Hello, world!");
                    } catch (Exception err) {
                        err.printStackTrace();
                    } finally {
                        if (writer != null) {
                            writer.close();
                        }
                    }
        -   valid: true
            text: |-
                .. code-block:: java

                    PrintWriter writer = null;

                    try (PrintWriter writer = new PrintWriter(new File("hello_world.txt"))) {
                        writer.write("Hello, world!");
                    } catch (Exception err) {
                        err.printStackTrace();
                    }
            feedback: Always prefer the try-with-resources notation as it takes much
                less code lines
        multiple: true
        limit: 0
        type: multiple_choice
        name: Give it back
        header: |-
            When opening a file (`new File(filename)`), you should always close it to avoid undefined behaviour. Select the code(s) among the followings that are correctly coded.

            .. code-block:: java

                PrintWriter writer = null;

                try {
                    writer = new PrintWriter(new File("hello_world.txt"));
                    writer.write("Hello, world!");
                } catch (Exception err) {
                    err.printStackTrace();
                }
    mcq7:
        choices:
        -   valid: true
            text: No as we get the following compiler error "non-static variable count
                cannot be referenced from a static context"
        -   text: 'Yes'
            feedback: Non-static variable count cannot be referenced from a static
                context
        limit: 0
        name: Static / Not Static context on fields / methods call
        header: |-
            Does it work ?

            .. code-block:: java

             public class StaticTest {
               private int count=0;
               public static void main(String args[]) {
                 count++;
               }
             }
        type: multiple_choice
    mcq8:
        choices:
        -   text: |-
                .. code-block::

                  42
                  10.0
                  0.0
            valid: true
        -   text: |-
                .. code-block::

                  2048
                  10.0
                  0.0
            feedback: Even for primitives (like int), the swap method will not work
        -   text: |-
                .. code-block::

                  42
                  40.0
                  0.0
            feedback: Just because we first change the value of the reference to the
                object in setGrade(), futher operations will be without effect
        limit: 0
        type: multiple_choice
        name: Pass by value or by reference
        header: |4-

            Can you correctly predict what would be the STDOUT of the following code ?

            .. code-block:: java

              // A user defined class to illustrate
              public class Student {
                private double grade;
                private String name;
                public Student(String name, double grade) {
                  this.name = name;
                  this.grade = grade;
                }
                public double getGrade() {
                  return this.grade;
                }
                public String getName() {
                  return this.name;
                }
                public void setGrade(double grade) {
                  this.grade = grade;
                }
              }

              public class Test {

                //Generic swap method
                public static void swap(Object o1, Object o2){
                  Object temp = o1;
                  o1 = o2;
                  o2 = temp;
                }

                // Common functions that illustrate external modification of a Object

                public static void setGrade(Student std) {
                  std = new Student(std.getName(), std.getGrade() * 2 );
                  std.setGrade( std.getGrade() * 2 );
                }

                public static void setGrade2(Student std) {
                  std.setGrade(0);
                }

                // Let's see if you can correctly predict the STDOUT

                public static void main(String[] args) {

                  int meanOfLife = 42;
                  int randomInt = 2048;
                  swap(meanOfLife, randomInt);
                  System.out.println(meanOfLife);

                  Student std = new Student("Noel", 10);
                  setGrade(std);
                  System.out.println(std.getGrade());

                  setGrade2(std);
                  System.out.println(std.getGrade());
                }
              }
    mcq9:
        limit: 0
        choices:
        -   text: 'Missing a semicolon after v * 3.14 : Each statement must finish
                by a semicolon'
            valid: true
        -   text: Missing a double modifier in the method declaration of computeSomething
            valid: true
        -   text: You can't multiply a floating point number with an integer in Java.
            feedback: You can multiply a floating point number with an integer but
                it's not a good habit
        type: multiple_choice
        name: Forgetting something ...
        multiple: true
        header: |-
            What are the problems here ?

            .. code-block:: java

              public class Wrong {
                public static computeSomething(int v) {
                  return v * 3.14
                }
              }
        error_message: Don't forget to select all the answers
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0

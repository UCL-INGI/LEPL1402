accessible: /2019-11-08 23:59:00/2019-11-08 23:59:00
author: Yakoub J, Rucquoy A
categories:
- module2
context: |-
    In this task, you have to implement a Circular linked list : a list where the last element points to the first element. In this exercise, the list must maintain a reference
    to the last of its elements. Each time you want to add an element, you must append it at the end of the list. Removing an element is a bit different: you need to specify
    an index to choose which element of the list you want to remove (``remove(0)`` for the first ... ``remove(size()-1)`` for the last). **Pay attention**: your ``remove`` method
    must throw an ``IndexOutOfBoundsException`` if the index parameter is smaller than ``0`` or greater than ``size()-1``

    .. figure:: /course/LEPL1402/CircularLL/CircularLinkedList.png
       :scale: 100 %
       :alt: alternate text
       :align: center
       :figclass: align-center


    You also need to implement the ``ListIterator`` class.
    Iterator_ is an interface you have to implement in order to make the class implementing it able to enumerate/browse/iterate over an object : here, we want you to implement a FIFO order iterator
    over your ``CircularLinkedList``. **Pay attention**:

        - Your iterator don't have to implement the ``remove`` method from Iterator_.
        - Your iterator must throw a ``ConcurrentModificationException`` when you want to get the next element but some other element has been added to the list meanwhile.

    .. _Iterator : https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html


    You can download the `IntelliJ Project`_:

    .. _`IntelliJ Project`: /course/LEPL1402/CircularLL/LEPL1402_CircularLL.zip


    Here is the class (downloadable here_) where we will insert your code :


    .. _here: /course/LEPL1402/CircularLL/CircularLinkedList.java

    .. code-block:: java

        import java.util.ConcurrentModificationException;
        import java.util.Iterator;


        public class CircularLinkedList<Item> implements Iterable<Item> {

            private int n;          // size of the list
            private Node last;   // trailer of the list

            // helper linked list class
            private class Node {

                private Item item;
                private Node next;

                private Node(Item item){
                    this.item = item;
                    this.next = null;
                }

            }

            public CircularLinkedList() {
                last = null;
                n = 0;
            }

            public boolean isEmpty() {
                return n == 0;
            }

            public int size() {
                return n;
            }

            public Node getLast(){
                return last;
            }

            public Item getItem(Node n){
                return n.item;
            }



            /**
            * Append an item at the end of the list
            * @param item the item to append
            */
            public void enqueue(Item item) {
                // YOUR CODE HERE
            }

            /**
            * Removes the element at the specified position in this list.
            * Shifts any subsequent elements to the left (subtracts one from their indices).
            * Returns the element that was removed from the list.
            */
            public Item remove(int index) {
                // YOUR CODE HERE
            }


            /**
            * Returns an iterator that iterates through the items in FIFO order.
            * @return an iterator that iterates through the items in FIFO order.
            */
            public Iterator<Item> iterator() {
                return new ListIterator();
            }

            /**
            * Implementation of an iterator that iterates through the items in FIFO order.
            *
            */
            private class ListIterator implements Iterator<Item> {
                // YOUR CODE HERE
            }


        }
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[Module 2] Circular Linked list'
network_grading: false
order: 25
problems:
    student_enqueue:
        type: code
        default: ''
        name: ''
        header: 'Paste here the BODY of your ``enqueue`` method:'
        language: java
    student_remove:
        header: 'Paste here the BODY of your ``remove(int index)`` method:'
        default: ''
        language: java
        type: code
        name: ''
    student_iterator:
        default: ''
        header: 'Paste here the BODY of your ``ListIterator`` class:'
        type: code
        name: ''
        language: java
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0

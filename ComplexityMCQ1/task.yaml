accessible: false
author: Bastin J, Piron H
categories:
- module2
context: ''
environment: mcq
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    output: '2'
    memory: '100'
    time: '30'
name: '[Module 2] Complexity : simple MCQ'
network_grading: false
order: 10
problems:
    mcq5:
        header: If an algorithm ran in less than a miscrosecond on my computer, what
            can I conclude?
        type: multiple_choice
        choices:
        -   text: Its time complexity is :math:`\mathcal{O}(1)`
            feedback: Execution time is very different than complexity
        -   text: Its time complexity is :math:`\mathcal{O}(n)`
            feedback: Execution time is very different than complexity
        -   text: I can't say anything about its time complexity because i don't have
                the size of the problem
        -   text: I can't say anything about time complexity because i don't know
                the algorithm
            valid: true
        name: Time Complexity vs Execution Time
        limit: 0
    mcq1:
        choices:
        -   valid: true
            feedback: Good job! The matrix has 3 dimensions and the algorithm go through
                every cell.
            text: :math:`\Theta(n^3)`
        -   feedback: There are 3 loops!
            text: :math:`\Theta(n^2)`
        -   feedback: Are worst and best cases different?
            text: :math:`\mathcal{O}(n^3)`
        -   text: :math:`\mathcal{O}(n^2)`
            feedback: Did you go to the lecture? It is supposed to be the easiest
                question
        name: Nested loops
        header: |-
            What is the time complexity of this algorithm? (Select the best possible answer)

            .. code-block:: java

                public static int max(int[][][] array){

                    int r= array[0][0][0];

                    for(int i = 0 ; i < array.length ; i++){
                        for(int j = 0 ; j< array[0].length ; j++){
                            for(int k =0 ; k<array[0][0].length; k++){

                                r = Math.max(r , array[i][j][k]);

                            }
                        }
                    }
                    return r;
                }

            Consider that the matrix is cubic of length :math:`n`.
        limit: 0
        type: multiple_choice
    mcq2:
        name: Finding Maximum
        choices:
        -   text: :math:`\Omega(1)`
        -   text: :math:`\mathcal{O}(n^2)`
        -   text: :math:`\Theta(1)`
        -   text: :math:`\mathcal{O}(n)`
        -   text: :math:`\Theta(n)`
            valid: true
        -   text: :math:`\Omega(n)`
        multiple: true
        header: |+
            What time complexity does it take to find the maximum in a list of length :math:`n`? (Select the best answer(s))

        type: multiple_choice
        limit: 0
    mcq3:
        limit: 0
        choices:
        -   text: :math:`\mathcal{O}(n^2)`
            valid: true
        -   text: :math:`\mathcal{O}(n^3)`
        -   valid: true
            text: :math:`\Omega(1)`
        -   text: :math:`\Omega(n)`
        -   text: :math:`\Theta(n^2)`
        -   text: :math:`\Theta(n)`
        header: You iterate through a quared 2 dimensional array of length :math:`n`
            to find a value. What is (are) the most precise time complexity(ies)?
        type: multiple_choice
        name: Find value
        multiple: true
    mcq4:
        choices:
        -   text: :math:`\mathcal{O}(n)`
        -   text: :math:`\mathcal{O}(n^2)`
        -   text: :math:`\Theta(n)`
            valid: true
        -   text: :math:`\Theta(\log(n))`
        -   text: :math:`\Omega(1)`
        -   text: :math:`\Omega(\log(n))`
        header: You write a function to verify if a list of length :math:`n` is ordered
            or not, this function returns true if it is and false if it is'nt. What
            is (are) the most precise time complexity(ies)?
        multiple: true
        type: multiple_choice
        name: Ordered List
        limit: 0
    mcq6:
        multiple: true
        type: multiple_choice
        name: Polynomial Time Complexity
        choices:
        -   valid: true
            text: 'True because for :math:`c = 3` and :math:`cn^2 > 3n^2 -100n + 6
                \: , \: \forall n > 0` '
        -   text: True because for any :math:`c > 0 ` and :math:`cn < 3n^2` when :math:`n
                > c`
        -   text: 'False because for :math:`c = 3` and :math:`cn^2 > 3n^2 -100n +
                6 \: , \: \forall n > 0` '
        -   text: False because for any :math:`c > 0 ` and :math:`cn < 3n^2` when
                :math:`n > c`
        header: |+
            Is this proposition true? :math:`3n^2 -100n + 6 \in \mathcal{O}(n^2)`


        limit: 0
    mcq7:
        choices:
        -   text: :math:`1000n^2 + 0.001n^3 \in \Theta(n^3)`
            valid: true
        -   valid: true
            text: :math:`n^2 \in \Omega(n)`
        -   text: :math:`0.00001 \in \Theta(1)`
            valid: true
        -   text: :math:`2^{2n} \in \mathcal{O}(2^n)`
        -   text: :math:`3^n \in \mathcal{O}(2^n)`
        -   text: :math:`n \log(n) \in \mathcal{O}(n)`
        type: multiple_choice
        name: Mathematical Functions and Time Complexity
        header: 'Select the right proposition(s) :'
        multiple: true
        limit: 0
    mcq8:
        header: |-
            What is the time complexity of this algorithm taking into account the complexity of ``findMax`` and ``findMin``?

            .. code-block:: java

                public static int[][] byLineMaxAndMin(int[][] tab){
                    int n = tab.length;
                    int m = tab[0].length;
                    int[][] r = new int[n][2];
                    for(int i = 0; i < n; i++){
                        r[i][0] = findMax(tab[i]); //method time complexity in Theta(m)
                        r[i][1] = findMin(tab[i]); //method time complexity in Theta(m)
                    }
                    return r;
                }
        choices:
        -   text: :math:`\Theta(n+m)`
        -   valid: true
            text: :math:`\Theta(n*m)`
        -   text: :math:`\mathcal{O}(n+m)`
        -   text: :math:`\mathcal{O}(n^2*m)`
        -   text: :math:`\Theta(n^2+m)`
        -   text: :math:`\Theta(n+m^2)`
        -   text: :math:`\mathcal{O}(n*m^2)`
        limit: 0
        type: multiple_choice
        name: Complexity of algorithm
    mcq9:
        choices:
        -   text: :math:`\Theta(n*m)`
        -   text: :math:`\mathcal{O}(n*m)`
        -   text: :math:`\Theta(n+m)`
            valid: true
        -   text: :math:`\mathcal{O}(n+m)`
        header: What time complexity does it take to merge two ordered arrays into
            a third ordered one? The two arrays have a size of :math:`n` and :math:`m`
            respectively.
        type: multiple_choice
        name: Merging two ordered arrays
        limit: 0
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0

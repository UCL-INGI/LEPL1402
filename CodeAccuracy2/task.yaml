accessible: false
author: Yakoub J, Rucquoy A
categories:
- module2
context: |-
    In order to discover the importance of pre/post conditions and invariants in your programs, we will take the example of QuickSort.

    Quicksort is a divide-and-conquer method for sorting. It works by partitioning an array into two parts, then sorting the parts independently. It takes the first element of the Array, then it determines its position in the array by iterating through it. If an element is lower, it moves the element to its left and increment its own position. Then it recursivly do the same operation for each sub array (left and right of the pivot).

    .. figure:: /course/LEPL1402/CodeAccuracy2/quicksort-overview.png
       :scale: 100 %
       :alt: alternate text
       :align: center
       :figclass: align-center

    The crux of the method is the partitioning process , which can be summarized as follows :

    .. figure:: /course/LEPL1402/CodeAccuracy2/partitioning-overview.png
       :scale: 100 %
       :alt: alternate text
       :align: center
       :figclass: align-center

    Even with this simple algorithm, mistakes can occur and that is why we ask you to complete the implementation
    contained in this file_ , without forgetting to add assert statements in each method (as they will be tested separately in INGINIOUS).


    You can download the `IntelliJ Project`_.

    .. _`IntelliJ Project`: /course/LEPL1402/CodeAccuracy2/LEPL1402_CodeAccuracy2.zip

    .. _file: /course/LEPL1402/CodeAccuracy2/QuickSort.java
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[Module 2] Quick Sort - Implem exercise'
network_grading: false
order: 60
problems:
    exch_code:
        default: ''
        header: 'Paste here the **body** of your **swap(Object[] a, int i, int j)**
            method:'
        language: java
        name: ''
        type: code
    partition_code:
        name: ''
        header: 'Paste here the **body** of your **partition(Comparable[] a, int left,
            int right)** method:'
        default: ''
        language: java
        type: code
    sort_code:
        language: java
        type: code
        default: ''
        header: 'Paste here the **body** of your **sort(Comparable[] a)** method:'
        name: ''
    sort_code2:
        header: 'Paste here the **body** of your **sort(Comparable[] a, int left,
            int right)** method:'
        type: code
        language: java
        name: ''
        default: ''
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0

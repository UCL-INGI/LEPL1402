accessible: false
author: Bastin J, Piron H
categories:
- module3
context: |
    The three first questions will be time complexity questions about trees, the trees we are talking about is a complete ordered binary tree. Like the example you see here under:

    .. image:: /course/LEPL1402/complexityMCQ2/binaryTree.png
       :scale: 60%
       :align: center
       :height: 375px
       :width: 653px


    The rest of the questions are harder question about the time complexity of operations on list and arrays. Some questions will be about simple linked list, other about double linked list and some about circular linked list.
environment: mcq
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[Module 3] Time Complexity MCQ (trees, tsp, sort, lists)'
network_grading: false
order: 31
problems:
    mcq:
        choices:
        -   text: :math:`\Theta(n)`
        -   text: :math:`\mathcal{O}(n)`
        -   text: :math:`\mathcal{O}(nlog(n))`
        -   valid: true
            feedback: GOOD JOB
            text: :math:`\Theta(log(n))`
        header: In what complexity can you determine the depth of a tree? (Choose
            the most precise answer)
        type: multiple_choice
        name: Depth
        limit: 0
    mcq2:
        choices:
        -   text: :math:`\mathcal{O}(n)`
        -   text: :math:`\Omega(log(n))`
        -   valid: true
            text: :math:`\mathcal{O}(log(n))`
        -   text: :math:`\Theta(log(n))`
        -   text: :math:`\Omega(1)`
            valid: true
        -   text: :math:`\Theta(n)`
        type: multiple_choice
        multiple: true
        name: Find
        limit: 0
        header: 'The tree is still a complete ordered binary tree, in what complexity(ies)
            can you find an element? '
    mcq3:
        type: multiple_choice
        choices:
        -   text: :math:`\Theta(n)`
            valid: true
        -   text: :math:`\Theta(nlog(n))`
        -   text: :math:`\mathcal{O}(nlog(n))`
        -   text: :math:`\Theta(n^2)`
        header: 'What is the complexity of an in-order traversal? '
        name: Traversal
        limit: 0
    mcq4:
        header: What is the time complexity of finding the maximum in a sorted array?
            (Where :math:`n` is the size of the array)
        choices:
        -   text: :math:`\Theta(1)`
            valid: true
        -   text: :math:`\Theta(n)`
        -   text: :math:`\mathcal{O}(1)`
        -   text: :math:`\mathcal{O}(n)`
        name: Sorted Array
        type: multiple_choice
        limit: 0
    mcq5:
        choices:
        -   valid: true
            text: :math:`\Theta(n)`
        -   text: :math:`\Theta(n^2)`
        -   text: :math:`\mathcal{O}(n)`
        -   text: :math:`\mathcal{O}(1)`
        name: Simple linked list
        header: |-
            Consider a simple linked list like the one you see on the image, we only have a reference to the head of the list.  What is the complexity of finding the size :math:`n` of the list

            .. image:: /course/LEPL1402/complexityMCQ2/singlylinkedlist.png
               :scale: 20%
               :align: center
               :height: 193px
               :width: 1920px

            \
        limit: 0
        type: multiple_choice
    mcq6:
        choices:
        -   valid: true
            text: :math:`\Theta(n)`
        -   text: :math:`\Theta(1)`
        -   text: :math:`\mathcal{O}(n)`
        -   text: :math:`\mathcal{O}(1)`
        header: |+
            Consider the following ordered simple linked list, we only have a reference to the head of the list. What is the complexity of finding the **maximum** of the list? (Where :math:`n` is the size)

            .. image:: /course/LEPL1402/complexityMCQ2/orderedsinglylinkedlist.png
               :scale: 20%
               :align: center
               :height: 193px
               :width: 1920px

            \

        type: multiple_choice
        limit: 0
        name: ''
    mcq7:
        choices:
        -   valid: true
            text: :math:`\Theta(1)`
        -   text: :math:`\Theta(n)`
        -   text: :math:`\mathcal{O}(1)`
        -   text: :math:`\mathcal{O}(n)`
        type: multiple_choice
        header: |
            Consider the following ordered simple linked list, we only have a reference to the head of the list. What is the complexity of finding the **minimum** of the list? (Where :math:`n` is the size)

            .. image:: /course/LEPL1402/complexityMCQ2/orderedsinglylinkedlist.png
               :scale: 20%
               :align: center
               :height: 193px
               :width: 1920px

            \
        name: ''
        limit: 0
    mcq8:
        header: |-
            The ``replaceValue`` method given bellow takes in parameter :
                - The **head** of a linked list of nodes
                - The **oldValue** to be replaced by the **newValue**.

            .. code-block:: java

                private class Node {

                    Node next;
                    int value;

                    Node(int value){
                        this.value = value;
                    }
                }

                public void replaceValue(Node head, int oldValue, int newValue){
                    if(head.next != null && oldValue != newValue) {
                        if (head.value == oldValue){
                            head.value = newValue;
                            oldValue = newValue;
                        }
                        replaceValue(head.next, oldValue, newValue);
                    }
                }

            Give the time complexity(ies) of ``replaceValue`` knowing that the linked list has a size of :math:`n`.
        name: ''
        choices:
        -   text: :math:`\mathcal{O}(1)`
        -   text: :math:`\Theta(1)`
        -   text: :math:`\Theta(n)`
        -   valid: true
            text: :math:`\mathcal{O}(n)`
        -   text: :math:`\Omega(n)`
        -   valid: true
            text: :math:`\Omega(1)`
        type: multiple_choice
        multiple: true
        limit: 0
    mcq9:
        choices:
        -   text: :math:`\mathcal{O}(n^3)`
        -   text: :math:`\mathcal{O}(2^n)`
        -   text: :math:`\mathcal{O}(n^2)`
        -   text: :math:`\mathcal{O}(3^n)`
        -   valid: true
            text: :math:`\mathcal{O}(n!)`
        header: |-
            Here is the *Travelling Salesman Problem* : "Given a list of cities and the distance between each pair of cities, what is the shortest path that travels each city and returns to the origin city?".

            The picture bellow is a graph_ that represents cities and the distance between them :

            .. image:: /course/LEPL1402/complexityMCQ2/Weighted_K4.png
               :scale: 50%
               :align: center
               :height: 500px
               :width: 600px

            This graph can be translated into an adjacency matrix :

            .. code-block:: java

                int[][] matrix = {
                    {0, 20, 42, 35},
                    {20, 0, 30, 34},
                    {42, 30, 0, 12},
                    {35, 34, 12, 0}};

            A simple solution to this problem is to test all possible permutations in the order in which the cities are crossed. A possible permutation is {A, B, C, D} : the path starts in the city A, then crosses B, C and D and finally returns to A. Here is another permutation : {B, D, C, A}.

            In your opinion, what is the time complexity of the solution described above? Consider :math:`n` is the number of city

            .. _graph: https://en.wikipedia.org/wiki/Graph_theory
        name: Travelling Salesman Problem
        type: multiple_choice
        limit: 0
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0

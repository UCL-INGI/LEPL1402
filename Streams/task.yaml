accessible: false
author: Yakoub J, Rucquoy A
categories:
- module5
context: |-
    Given the Student_ class, You are asked to write the implementation of the StudentFunctions_ class ( that implements the StudentStreamFunction_ interface ) :

    .. code-block:: java

       import java.util.stream.Stream;

       public interface StudentStreamFunction {

          // Find the N°2 and N°3 top students for the given course name in parameter
          public Stream<Student> findSecondAndThirdTopStudentForGivenCourse(
              Stream<Student> studentStream, String name);

          // Compute for each student in the given section their average grade result,
          // sorted by their result (ascending) as an array of array structured like that :
          // [ ["Student FirstName1 LastName1", 7.5], ["Student FirstName2 LastName2", 9.5] ]
          public Object[] computeAverageForStudentInSection(Stream<Student> studentStream,
                                                              int section);

          // Give the number of students that success in all courses (> 10.0)
          public int getNumberOfSuccessfulStudents(Stream<Student> studentStream);

          // Find the student that is the last one in the lexicographic order
          // ( You must first compare students on their lastNames then on their firstNames )
          public Student findLastInLexicographicOrder(Stream<Student> studentStream);


          // Give the full sum of the grade obtained by all students
          public double getFullSum(Stream<Student> studentStream);

       }


    You can download the `IntelliJ Project`_ that contains few tests to help you.

    .. _`IntelliJ Project`: /course/LEPL1402/Streams/LEPL1402_Streams.zip

    .. _StudentStreamFunction: /course/LEPL1402/Streams/StudentStreamFunction.java
    .. _Student: /course/LEPL1402/Streams/Student.java
    .. _StudentFunctions: /course/LEPL1402/Streams/StudentFunctions.java
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    time: '30'
    output: '2'
name: '[Module 5] Dealing with Streams'
network_grading: false
order: 49
problems:
    student_find_second_and_third_top_student_for_given_course:
        name: ''
        header: 'Paste here the **body** of your ``findSecondAndThirdTopStudentForGivenCourse``
            method : '
        type: code
        default: ''
        language: java
    student_compute_average_for_student_in_section:
        header: 'Paste here the **body** of your ``computeAverageForStudentInSection``
            method : '
        type: code
        default: ''
        language: java
        name: ''
    student_get_number_of_successful_students:
        default: ''
        type: code
        language: java
        name: ''
        header: 'Paste here the **body** of your ``getNumberOfSuccessfulStudents``
            method : '
    student_find_last_in_lexicographic_order:
        type: code
        default: ''
        language: java
        header: 'Paste here the **body** of your ``findLastInLexicographicOrder``
            method : '
        name: ''
    student_get_full_sum:
        header: 'Paste here the **body** of your ``getFullSum`` method : '
        language: java
        type: code
        name: ''
        default: ''
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0

accessible: /2019-11-08 23:59:00/2019-11-08 23:59:00
author: Yakoub J, Rucquoy A
categories:
- module3
context: |-
    Write a method combineWith that could be added to the Tree_ class (Node class can be found here_).

    The method accepts another binary tree of integers as a parameter and combines the two trees into a new third tree which is returned.
    The new tree's structure should be a union of the structures of the two original trees.

    It should have a node in any location where there was a node in either of the original trees (or both).

    The nodes of the new tree should store an integer indicating the sum of the values at that position of the original trees if possible.
    (else only the value of the not null node)

    For example, suppose Tree variables t1 and t2 have been initialized and store the following trees:

    .. figure:: /course/LEPL1402/TreeCombineWith/example-part1.png
       :scale: 100 %
       :alt: alternate text
       :align: center
       :figclass: align-center

    Then the following call:

    .. code-block:: java

       Tree t3 = t1.combineWith(t2);

    Will return a reference to the following tree:

    .. figure:: /course/LEPL1402/TreeCombineWith/example-part2.png
       :scale: 100 %
       :alt: alternate text
       :align: center
       :figclass: align-center

    You may define private helper methods to solve this problem but in any case, your method should not change the structure or contents of either of the two trees being compared.

    (This exercise was partialy inspired by this source_)

    You can download the `IntelliJ Project`_ that contains few tests to help you.

    .. _`IntelliJ Project`: /course/LEPL1402/TreeCombineWith/LEPL1402_TreeCombineWith.zip

    .. _here: /course/LEPL1402/TreeCombineWith/Node.java
    .. _Tree: /course/LEPL1402/TreeCombineWith/Tree.java
    .. _source: https://practiceit.cs.washington.edu/problem/view/cs2/exams/finals/final4/combineWith
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    output: '2'
    time: '30'
name: '[Module 3] Binary trees - combineWith'
network_grading: false
order: 30
problems:
    student_combineWith:
        type: code
        default: ''
        language: java
        name: ''
        header: 'Paste here the **body** of your ``combineWith`` method from class
            ``Tree``:'
    student_additional_contents:
        header: 'Paste here the rest of the **body** of the class ``Tree`` (if you
            have defined private helper methods to solve this problem) :'
        optional: 'on'
        default: ''
        name: ''
        type: code
        language: java
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0

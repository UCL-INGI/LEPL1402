accessible: false
author: Yakoub J, Rucquoy A
categories:
- module6
context: |-
    In this task we will ask you to solve the producer/consumer problem, represented here as a concurrent bounded FIFO queue. We will run simultaneously two different types of threads on your queue :

        - Consumers, consuming (= dequeuing) elements from the queue.
        - Producers, producing (= enqueuing) elements to the queue.

    Your queue needs to be thread-safe : it must be able to operate in a concurrent environment. It also means that threads must wait if necessary.
    A producer can't progress if there's no space left in the queue. A consumer can't take element from the queue if it is empty.
    For this exercise, you will need to implement ``enqueue`` and ``dequeue``, using all the instance variables that are in
    the LockQueue_ class below. We strongly suggest you to look at await_ and signal_ (or ``signalAll``) methods. You are not allowed to instantiate new locks or condition objects.


    You can download the `IntelliJ Project`_ that contains few tests to help you.

    .. _`IntelliJ Project`: /course/LEPL1402/ProducerConsumer/LEPL1402_ProducerConsumer.zip

    .. _await: https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Condition.html#await--
    .. _signal: https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Condition.html#signal--
    .. _LockQueue: /course/LEPL1402/ProducerConsumer/LockQueue.java

    .. code-block:: java

        import java.util.concurrent.locks.Condition;
        import java.util.concurrent.locks.ReentrantLock;

        public class LockQueue {

            public final static int SIZE = 100;

            private final ReentrantLock lock = new ReentrantLock();
            private final Condition notFull = lock.newCondition();
            private final Condition notEmpty = lock.newCondition();

            public int head = 0;
            public int tail = 0;
            public final Integer [] cells = new Integer[SIZE];
            public int count = 0;



            public Integer dequeue() {
                // YOUR CODE HERE
            }


            public void enqueue(Integer i) {
                // YOUR CODE HERE
            }

            public boolean full(){
                return this.count == SIZE;
            }

            public boolean empty(){
                return this.head == this.tail;
            }

            public int size() { return this.tail - this.head; }

        }
environment: java8scala
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    memory: '100'
    time: '30'
    output: '2'
name: '[Module 6] Threads - Producer/Consumer with locks'
network_grading: false
order: 57
problems:
    student_enqueue:
        language: java
        type: code
        header: Paste here the **body** of your ``enqueue`` method.
        name: ''
        default: ''
    student_dequeue:
        type: code
        language: java
        default: ''
        header: Paste here the **body** of your ``dequeue`` method.
        name: ''
run_cmd: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
